

public class NodeTree {
		int key;
		
		NodeTree left;
		NodeTree right;
		public NodeTree(){
			
		}
		public NodeTree(int k){
			key=k;
			left= null;
			right = null;
		}
	
	void add(int k){
		NodeTree newNode = new NodeTree(k);
		NodeTree tree=this;
		if (tree==null){
			tree=newNode;
			System.out.println("null");
			System.out.println(tree.key);
		}else{
			if(tree.key<k){
				System.out.println(tree.key+" is smaller than "+k);
				NodeTree focusNode=tree.left;
				while(true){
					if (focusNode.key>k){
						focusNode=focusNode.left;
						if(focusNode==null){
							focusNode=newNode;
							return;
						}
					}else{
						focusNode=focusNode.right;
						if(focusNode==null){
							focusNode=newNode;
							return;
						}
					}
				}
				
				
			}else{
				System.out.println(tree.key+" is bigger than "+k);
				NodeTree focusNode=tree.left;
				while(true){
					if (focusNode.key>k){
						focusNode=focusNode.left;
						if(focusNode==null){
							focusNode=newNode;
							return;
						}
					}else{
						focusNode=focusNode.right;
						if(focusNode==null){
							focusNode=newNode;
							return;
						}
					}
				}
				
			}
		}
	}
	
	public void inOrderTraversal(NodeTree tree){
		if (tree != null){
			if(tree.left==null){
				System.out.println("tree left is empty");
			}
			inOrderTraversal(tree.left);
			
			System.out.println(tree.key);
			if(tree.right==null){
				System.out.println("tree right is empty");
			}
			inOrderTraversal(tree.right);
			
		}
	}
	
	public static void main(String[] args){
		NodeTree tree = new NodeTree();
		tree.add(2);
		tree.add(4);
		tree.inOrderTraversal(tree);
	}
}